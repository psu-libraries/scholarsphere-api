# Swagger spec for Scholarsphere (see https://swagger.io/specification/)

openapi: "3.0.2"
info:
  title: "Scholarsphere"
  description: "API specification for Scholarsphere"
  termsOfService: "https://scholarsphere.psu.edu/about"
  contact:
    name: "Scholarsphere Support"
    email: "umg-up.its.scholarsphere-support@groups.ucs.psu.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: "0.1.0"

servers:
  - url: "https://api.scholarsphere.psu.edu/{version}"
    description: "Public-facing production API endpoint"
    variables:
      version:
        description: "Version of the API"
        enum:
          - "v1"
          - "v2"
        default: "v1"
  - url: "https://api-qa.scholarsphere.psu.edu/{version}"
    description: "Internal API endpoint for QA testing"
    variables:
      version:
        description: "Version of the API"
        enum:
          - "v1"
          - "v2"
        default: "v1"

# Listing of the basic model concepts used in the application (see https://swagger.io/specification/#tagObject)
tags:
  - name: "Work"
    description: "Descriptive resource containing file sets and metadata."
    externalDocs:
      description: "PCDM object"
      url: "http://pcdm.org/models#Object"
  - name: "FileSet"
    description: "Resource containing one original file and zero or more derivative files."
    externalDocs:
      description: "PCDM object"
      url: "http://pcdm.org/models#Object"
  - name: "File"
    description: "Binary data and accompanying metadata."
    externalDocs:
      description: "PCDM file"
      url: "http://pcdm.org/models#File"
  - name: "Agent"
    description: "Unique person or organization associated work."
  - name: "Alias"
    description: "An alternative name for an agent. There can be many alias for one agent."
  - name: "Identifier"
    description: "Alphanumeric string used as a unique identifier."

# Paths Object, containing multiple Path Item Objects. Each path item will contain multiple Operation Objects.
# See:
#   https://swagger.io/specification/#pathsObject
#   https://swagger.io/specification/#pathItemObject
#   https://swagger.io/specification/#operationObject
paths:
  /works:
    post:
      tags: ["Work"]
      summary: "Creates a new work"
      description: >-
        Client posts the required metadata and one or more binary files to the endpoint. If successful, a new work is
        created and returned to the client. Any files sent with the request will be processed asynchronously and
        added to the works as file sets.
      operationId: "createWork"
      requestBody:
        description: "Metadata for new work"
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/createWork"
            examples:
              minimal:
                summary: "Work with only required metadata"
                description: >-
                  Client posts metadata the minimal amount of required metadata in order for a new work to be created.
                  This includes only the display name of any creators, and the PSU network id of the user creating
                  the new work.

                  If the display name does not correspond to any existing Agent, a new one is created with name parsed
                  into given and surnanmes, and a new Alias created linking the new Agent to the display name.
                value:
                  title: "Work with Minimal Metadata"
                  creator:
                    display_name: "John Doe"
                  keyword:
                    - "keyword-1"
                    - "keyword-2"
                  rights: "https://creativecommons.org/licenses/by/4.0/"
                  description: >-
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                    labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
                    nisi ut aliquip ex ea commodo consequat.
                  resource_type: "Article"
                  depositor:
                    psu_id: "xyz123"
              complete:
                summary: "Work with complete metadata"
                description: >-
                  A work with complete metadata, including multiple creators. If these creators do not exist in the
                  system, new agent resources will be created using the supplied metadata. If the agent resources do
                  exist, then their records will be updated using the supplied metadata.
                value:
                  title: "Work with Complete Metadata"
                  creator:
                    - surname: "Doe"
                      given_name: "John Quincy"
                      display_name: "John Doe"
                      psu_id: "jqd12"
                      email: "jqd12@psu.edu"
                      orcid_id: "88888888"
                    - surname: "Doe"
                      given_name: "Jane Quinn"
                      display_name: "Jane Doe"
                      psu_id: "jqd13"
                      email: "jqd13@psu.edu"
                      orcid_id: "99999999"
                  keyword:
                    - "keyword-1"
                    - "keyword-2"
                  rights: "https://creativecommons.org/licenses/by/4.0/"
                  description: >-
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                    labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
                    nisi ut aliquip ex ea commodo consequat.
                  resource_type: "Article"
                  depositor:
                    psu_id: "xyz123"
                  contributor:
                    - "First Contributor"
                    - "Second Contributor"
                  publisher:
                    - "First Publisher"
                    - "Second Publisher"
                  published_date:
                    - "2019"
                  subject:
                    - "Subject One"
                    - "Subject Two"
                  language:
                    - "English"
                  identifier:
                    - "alternate-id-1234"
                  based_near:
                    - "State College, PA"
                  related_url:
                    - "http://realted.url.com"
                  source:
                    - "Source of material"
      security:
        - psuKey: []
      responses:
        200:
          description: >-
            Work is successfully created and the client recieves a description of the new work.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/work"
              examples:
                work:
                  summary: "Newly created work"
                  value:
                    id: "bdec3693-c4c1-42dd-9067-b1e15e5ef2f5"
                    title: "Work with Minimal Metadata"
                    creator:
                      - surname: "Doe"
                        given_name: "John Quincy"
                        display_name: "John Doe"
                        psu_id: "jqd12"
                        email: "jqd12@psu.edu"
                        orcid_id: "88888888"
                    keyword:
                      - "keyword-1"
                      - "keyword-2"
                    rights: "https://creativecommons.org/licenses/by/4.0/"
                    description: >-
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                      labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
                      nisi ut aliquip ex ea commodo consequat.
                    resource_type: "Article"
        default:
          $ref: "#/components/responses/defaultPostError"
  /works/{id}:
    get:
      tags: ["Work"]
      summary: "Displays a work"
      description: >-
        Returns all the associated metadata of a work, inlcuding its
      operationId: "showWork"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the resource"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        200:
          description: >-
            Returns the work and its associated metadata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/work"
        default:
          $ref: "#/components/responses/defaultGetError"
    put:
      tags: ["Work"]
      summary: "Updates an existing work"
      operationId: "updateWork"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the resource"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      requestBody:
        description: "Metadata with which to update the work"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateWork"
            examples:
              update:
                summary: "Updating the title of a work"
                description: >-
                  Client posts updated metadata and changes are applied to the work.
                value:
                  title: "New Updated Title"
      security:
        - psuKey: []
      responses:
        200:
          description: >-
            Work is successfully updated and the client recieves the complete, updated work.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/work"
              examples:
                work:
                  summary: "Sample updated work"
                  value:
                    id: "190500f8-8f7e-4bd4-bcf3-f9673cd6c580"
                    title: "New Updated Title"
                    creator:
                      - surname: "Doe"
                        given_name: "John Quincy"
                        display_name: "John Doe"
                        psu_id: "jqd12"
                        email: "jqd12@psu.edu"
                        orcid_id: "88888888"
                    keyword:
                      - "keyword-1"
                      - "keyword-2"
                    rights: "https://creativecommons.org/licenses/by/4.0/"
                    description: >-
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                      labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
                      nisi ut aliquip ex ea commodo consequat.
                    resource_type: "Article"
        default:
          $ref: "#/components/responses/defaultPutError"
    delete:
      tags: ["Work"]
      summary: "Deletes a work"
      operationId: "deleteWork"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the resource"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        200:
          $ref: "#/components/responses/defaultDeleteSuccess"
        default:
          $ref: "#/components/responses/defaultDeleteError"
  /filesets:
    post:
      tags: ["FileSet"]
      summary: "Creates a new fileset"
      operationId: "createFileSet"
      parameters:
        - in: "header"
          name: "metadata"
          description: "Metadata for the fileset"
          required: true
          schema:
            $ref: "#/components/schemas/fileSet"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultPostError"
  /filesets/{id}:
    get:
      tags: ["FileSet"]
      summary: "Displays a fileset"
      operationId: "showFileSet"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the fileset to be displayed"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        200:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultGetError"
    put:
      tags: ["FileSet"]
      summary: "Updates an existing fileset"
      operationId: "updateFileSet"
      parameters:
        - in: "header"
          name: "metadata"
          description: "Metadata for the fileset"
          required: true
          schema:
            $ref: "#/components/schemas/fileSet"
        - in: "path"
          name: "id"
          description: "Identifier of the fileset to be displayed"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultPutError"
    delete:
      tags: ["FileSet"]
      summary: "Deletes a fileset"
      operationId: "deleteFileSet"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the resource"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultDeleteError"
  /files:
    post:
      tags: ["File"]
      summary: "Creates a new file"
      operationId: "createFile"
      parameters:
        - in: "header"
          name: "metadata"
          description: "Metadata and binary content for the file"
          required: true
          schema:
            $ref: "#/components/schemas/file"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultPostError"
  /files/{id}:
    get:
      tags: ["File"]
      summary: "Downloads a file"
      operationId: "showFile"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the file to be downloaded"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        200:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultGetError"
    put:
      tags: ["File"]
      summary: "Updates an existing file with a new version"
      operationId: "versionFile"
      parameters:
        - in: "header"
          name: "metadata"
          description: "Metadata and binary content for the file"
          required: true
          schema:
            $ref: "#/components/schemas/file"
        - in: "path"
          name: "id"
          description: "Identifier of the file"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultPutError"
    delete:
      tags: ["File"]
      summary: "Deletes a file"
      operationId: "deleteFile"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the resource"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultDeleteError"
  /agents:
    get:
      tags: ["Agent"]
      summary: "Displays all agents"
      operationId: "listAgents"
      security:
        - psuKey: []
      responses:
        200:
          description: "Successfully returned response"
        default:
          $ref: "#/components/responses/defaultGetError"
    post:
      tags: ["Agent"]
      summary: "Creates a new agent"
      operationId: "createAgent"
      parameters:
        - in: "header"
          name: "metadata"
          description: "Metadata for the agent"
          required: true
          schema:
            $ref: "#/components/schemas/agent"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultPostError"
  /agents/{id}:
    get:
      tags: ["Agent"]
      summary: "Displays an agent"
      operationId: "showAgent"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the agent to be displayed"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        200:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultGetError"
    put:
      tags: ["Agent"]
      summary: "Updates an existing agent"
      operationId: "updateAgent"
      parameters:
        - in: "header"
          name: "metadata"
          description: "Metadata for the agent"
          required: true
          schema:
            $ref: "#/components/schemas/agent"
        - in: "path"
          name: "id"
          description: "Identifier of the agent"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultPutError"
    delete:
      tags: ["Agent"]
      summary: "Deletes an agent"
      operationId: "deleteAgent"
      parameters:
        - in: "path"
          name: "id"
          description: "Identifier of the resource"
          required: true
          schema:
            $ref: "#/components/schemas/id"
      security:
        - psuKey: []
      responses:
        204:
          description: "Success"
        default:
          $ref: "#/components/responses/defaultDeleteError"

# Array of Schema Objects used to define the concepts/models (see https://swagger.io/specification/#schemaObject)
components:
  schemas:
    id:
      type: "object"
      properties:
        id:
          type: "string"
    basicMetadata:
      type: "object"
      required:
        - "title"
        - "keyword"
        - "rights"
        - "description"
        - "resource_type"
        - "depositor"
      properties:
        title:
          type: "string"
          example: "My Great Work"
        subtitle:
          type: "array"
          items:
            type: "string"
        keyword:
          type: "array"
          items:
            type: "string"
        rights:
          type: "string"
          enum:
            - "https://creativecommons.org/licenses/by/4.0/"
            - "https://creativecommons.org/licenses/by-sa/4.0/"
            - "https://creativecommons.org/licenses/by-nc/4.0/"
            - "https://creativecommons.org/licenses/by-nd/4.0/"
            - "https://creativecommons.org/licenses/by-nc-nd/4.0/"
            - "https://creativecommons.org/licenses/by-nc-sa/4.0/"
            - "http://creativecommons.org/publicdomain/mark/1.0/"
            - "http://creativecommons.org/publicdomain/zero/1.0/"
            - "http://www.europeana.eu/portal/rights/rr-r.html"
            - "http://www.apache.org/licenses/LICENSE-2.0"
            - "https://www.gnu.org/licenses/gpl.html"
            - "https://opensource.org/licenses/MIT"
        description:
          type: "array"
          items:
            type: "string"
        resource_type:
          type: "string"
          enum:
            - "Article"
            - "Audio"
            - "Book"
            - "Capstone Project"
            - "Conference Proceeding"
            - "Dataset"
            - "Dissertation"
            - "Image"
            - "Journal"
            - "Map or Cartographic Material"
            - "Masters Thesis"
            - "Part of Book"
            - "Poster"
            - "Presentation"
            - "Project"
            - "Report"
            - "Research Paper"
            - "Software or Program Code"
            - "Video"
            - "Other"
        depositor:
          type: "string"
          example: "xyz123"
    additionalMetadata:
      type: "object"
      properties:
        contributor:
          type: "array"
          items:
            type: "string"
        publisher:
          type: "array"
          items:
            type: "string"
        published_date:
          type: "array"
          items:
            type: "string"
        subject:
          type: "array"
          items:
            type: "string"
        language:
          type: "array"
          items:
            type: "string"
        identifier:
          type: "array"
          items:
            type: "string"
        based_near:
          type: "array"
          items:
            type: "string"
        related_url:
          type: "array"
          items:
            type: "string"
        source:
          type: "array"
          items:
            type: "string"
    creator:
      type: "object"
      properties:
        creator:
          type: "array"
          items:
            $ref: "#/components/schemas/alias"
    work:
      allOf:
        - $ref: "#/components/schemas/id"
        - $ref: "#/components/schemas/basicMetadata"
        - $ref: "#/components/schemas/additionalMetadata"
        - $ref: "#/components/schemas/creator"
        - type: "object"
          properties:
            member_ids:
              type: "array"
              items:
                $ref: "#/components/schemas/id"
    createWork:
      allOf:
        - $ref: "#/components/schemas/basicMetadata"
        - $ref: "#/components/schemas/additionalMetadata"
        - $ref: "#/components/schemas/creator"
        - type: "object"
          required:
            - "creator"
            - "uploaded_files"
          properties:
            uploaded_files:
              type: "array"
              items:
                type: "string"
                format: "binary"
    updateWork:
      allOf:
        - $ref: "#/components/schemas/basicMetadata"
        - $ref: "#/components/schemas/additionalMetadata"
        - $ref: "#/components/schemas/creator"
        - type: "object"
          required:
            - "creator"
          properties:
            uploaded_files:
              type: "array"
              items:
                type: "string"
                format: "binary"
    fileSet:
      type: "object"
      required:
        - "member_of"
        - "members"
        - "depositor"
      properties:
        id:
          $ref: "#/components/schemas/id"
        title:
          type: "string"
          example: "Fileset in the Great Work"
        member_of:
          $ref: "#/components/schemas/work"
        members:
          type: "array"
          items:
            $ref: "#/components/schemas/file"
        depositor:
          $ref: "#/components/schemas/agent"
    newFileSet:
      allOf:
        - $ref: "#/components/schemas/fileSet"
        - type: "object"
          required:
            - "file"
          properties:
            file:
              type: "string"
              format: "binary"
    file:
      type: "object"
      required:
        - "content"
      properties:
        id:
          $ref: "#/components/schemas/id"
        content:
          type: "string"
          format: "binary"
    agent:
      type: "object"
      required:
        - "surname"
      properties:
        id:
          $ref: "#/components/schemas/id"
        surname:
          type: "string"
          example: "Doe"
        given_name:
          type: "string"
          example: "John Quincy"
        email:
          type: "string"
          example: "jqd99@psu.edu"
        psu_id:
          type: "string"
          example: "jqd99"
        orcid_id:
          type: "string"
    alias:
      type: "object"
      required:
        - "display_name"
      properties:
        display_name:
          type: "string"
        surname:
          type: "string"
          example: "Doe"
        given_name:
          type: "string"
          example: "John Quincy"
        email:
          type: "string"
          example: "jqd99@psu.edu"
        psu_id:
          type: "string"
          example: "jqd99"
        orcid_id:
          type: "string"
    serverStatus:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    psuKey:
      type: "apiKey"
      description: "Example authorization mechanism to connect to the API. The implementation of generation and authorization will be resolved at a later date."
      name: "key"
      in: "header"
  responses:
    defaultPostError:
      description: >-
        If the resource can't be created, then there is some kind of error. The client can interpret the responses
        as follows:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverStatus"
          examples:
            clientError:
              $ref: "#/components/examples/clientError"
            unauthorized:
              $ref: "#/components/examples/unauthorized"
            incomplete:
              $ref: "#/components/examples/incomplete"
            serverError:
              $ref: "#/components/examples/serverError"
    defaultPutError:
      description: >-
        If the resource can't be updated, then there is some kind of error. The client can interpret the responses
        as follows:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverStatus"
          examples:
            clientError:
              $ref: "#/components/examples/clientError"
            unauthorized:
              $ref: "#/components/examples/unauthorized"
            incomplete:
              $ref: "#/components/examples/incomplete"
            serverError:
              $ref: "#/components/examples/serverError"
    defaultDeleteError:
      description: >-
        If the resource can't be deleted, then there is some kind of error. The client can interpret the responses
        as follows:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverStatus"
          examples:
            clientError:
              $ref: "#/components/examples/clientError"
            unauthorized:
              $ref: "#/components/examples/unauthorized"
            notFound:
              $ref: "#/components/examples/notFound"
            serverError:
              $ref: "#/components/examples/serverError"
    defaultGetError:
      description: >-
        If the request is not successful, then the default is some kind of error.
        The client can interpret as follows:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverStatus"
          examples:
            unauthorized:
              $ref: "#/components/examples/unauthorized"
            notFound:
              $ref: "#/components/examples/notFound"
            serverError:
              $ref: "#/components/examples/serverError"
    defaultDeleteSuccess:
      description: >-
        The resource was successfully deleted and a the client receives a confirmation message.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverStatus"
          examples:
            success:
              summary: "The system successfully performed the operation"
              value:
                code: 200
                message: "Success"
  examples:
    clientError:
      summary: "The client request is incorrect"
      value:
        code: 400
        message: "Error"
    unauthorized:
      summary: "The client is not authorized to perform the requested action"
      value:
        code: 401
        message: "Unauthorized"
    notFound:
      summary: "The requested resource does not exist"
      value:
        code: 404
        message: "Not Found"
    incomplete:
      summary: "The client request is valid, but contains incomplete or missing information"
      value:
        code: 422
        message: "Unprocessable Entity"
    serverError:
      summary: "The server threw some kind of error or exception"
      value:
        code: 500
        message: "Internal Server Error"


